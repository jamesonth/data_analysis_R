#' @export
bin_kurtosis = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_kurtosis(trials,prob))
}
dis1 = bin_distribution(5,0.5)
plot(dis1)
type(bin1)
typeof(bin1)
bin1
dis1
typeof(dis1)
class(dis1)
#' @export
bin_distribution = function(trials,prob){
re = data.frame(1,1)
names(re) = c("success","probability")
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
}
class(re) = c("bindis","data.frame")
return(re)
}
#' @export
plot.bindis = function(x){
plot(x$probability,type="b")
}
dis1 = bin_distribution(5,0.5)
plot(dis1)
#1.6
#' @export
bin_cumulitive = function(trials,prob){
re = data.frame(1,1,1)
names(re) = c("success","probability","cumulitive")
cumulitive = 0;
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
cumulitive = cumulitive +re[success+1,"probability"]
re[success+1,"cumulitive"] = cumulitive
}
class(re) = c("bincum","data.frame")
return(re)
}
#' @export
plot.bincum = function(x){
plot(x$probability,type="b")
}
library(devtools)
package(devtools)
install.packages(devtools)
library(devtools)
library(binomial)
install.packages("binomial")
library(binomial)
library("binomial")
install.packages("binomial")
library(binomial)
library("binomial")
library(binomial)
library(binomial)
library(binomial)
library(binomial)
install.packages("devtools")
#1.3
#' @title bin_choose
#' @description Creates an integer or a vector of integers
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an integer or a vector of integers
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_choose(5,2)
#'
#' # Another standard example
#' bin1 <- bin_choose(5,1:3)
bin_choose = function(n,k){
if(k>n){
stop("Invalid")
}
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
#1.4
#' @title bin_probability
#' @description Creates an integer or a vector of integers
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an integer or a vector of integers
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_probability(2,5,0.5)
#'
#' # Another standard example
#' bin1 <- bin_probability(0:2,5,0.5)
bin_probability = function(success,trials,prob){
if(check_trials(trials) != TRUE |   check_success(success,trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(bin_choose(trials,success)*(prob^success)*((1-prob)^(trials-success)))
}
#1.5
#' @title bin_distribution
#' @description Creates an object of class bindis
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bindis
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_distribution(5,0.5)
bin_distribution = function(trials,prob){
re = data.frame(1,1)
names(re) = c("success","probability")
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
}
class(re) = c("bindis","data.frame")
return(re)
}
#' @export
plot.bindis = function(x){
plot(x$probability,type="b")
}
#1.6
#' @title bin_cumulitive
#' @description Creates an object of class bincum
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bincum
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_cumulative(5,0.5)
bin_cumulitive = function(trials,prob){
re = data.frame(1,1,1)
names(re) = c("success","probability","cumulitive")
cumulitive = 0;
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
cumulitive = cumulitive +re[success+1,"probability"]
re[success+1,"cumulitive"] = cumulitive
}
class(re) = c("bincum","data.frame")
return(re)
}
#' @export
plot.bincum = function(x){
plot(x$probability,type="b")
}
#1.7
#' @title bin_variable
#' @description Creates an object of class binvar
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class binvar
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_variable(10,0.3)
bin_variable = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
re = list(trials,prob)
names(re) = c("trials","prob")
class(re) = "binvar"
return(re)
}
#' @export
print.binvar = function(x){
cat("Bionomial Variable \n Parameters \n  - number of trials: ",x$trials,"\n  - prob of success: ",x$prob)
}
#' @export
summary.binvar = function(x){
#return(cat("Summary Binomial \nParameters\n- number of trials: ",x$trials,"\n- prob of success: ",x$list,"\nMeasures\n- mean: ",aux_mean(x$trials,x$prob),"\n- variance: ",aux_variance(x$trials,x$prob),"\n- mode: ",aux_mode(x$trials,x$prob),"\n- skewness: ",aux_skewness(x$trials,x$prob),"\n- kurtosis: ",aux_kurtosis(x$trials,x$prob)))
freqs <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob))
obj <- list(freqs = freqs)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x) {
cat("Summary Binomial \nParameters\n- number of trials: ",x$freqs$trials,"\n- prob of success: ",x$freqs$prob,"\nMeasures\n- mean: ",aux_mean(x$freqs$trials,x$freqs$prob),"\n- variance: ",aux_variance(x$freqs$trials,x$freqs$prob),"\n- mode: ",aux_mode(x$freqs$trials,x$freqs$prob),"\n- skewness: ",aux_skewness(x$freqs$trials,x$freqs$prob),"\n- kurtosis: ",aux_kurtosis(x$freqs$trials,x$freqs$prob))
invisible(x)
}
#' @export
bin_mean = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mean(trials,prob))
}
#' @export
bin_variance = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_variance(trials,prob))
}
#' @export
bin_mode = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mode(trials,prob))
}
#' @export
bin_skewness = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_skewness(trials,prob))
}
#' @export
bin_kurtosis = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_kurtosis(trials,prob))
}
bin_mean(10,0.3)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("gastonstat/cointoss")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout1")
devtools::install_github("jamesonth")
devtools::install_github("jamesonth"/)
devtools::install_github("jamesonth"/workout2)
devtools::install_github("jamesonth"/workout1)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/binomial)
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout01-Jameson-Hohbein")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("https://github.com/jamesonth/binomial.git")
https://github.com/jamesonth/binomial.git
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
sqrt{(0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2
sqrt((0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2)
sqrt((0.1-0.92)^2 + (0.16-0.80)^2 + (0.15-0.70)^2 + (0.28-0.60)^2 + (0.31-0.61)^2)
sqrt((0.92-0.10)^2 + (0.8-0.16)^2 + (0.7-0.15)^2 + (0.6-0.28)^2 + (0.61-0.31)^2)
sqrt((0.1-0.10)^2 + (0.16-0.16)^2 + (0.15-0.15)^2 + (0.28-0.28)^2 + (0.31-0.31)^2)
sqrt((0.44-0.1)^2 + (0.25-0.16)^2 + (0.35-0.15)^2 + (0.59-0.28)^2 + (0.64-0.31)^2)
sqrt((0.92-0.91)^2 + (0.8-0.83)^2 + (0.7-0.81)^2 + (0.6-0.55)^2 + (0.61-0.46)^2)
sqrt((0.1-0.91)^2 + (0.16-0.83)^2 + (0.15-0.81)^2 + (0.28-0.55)^2 + (0.31-0.46)^2)
sqrt((0.44-0.91)^2 + (0.25-0.83)^2 + (0.35-0.81)^2 + (0.59-0.55)^2 + (0.64-0.46)^2)
getwd()
setwd('..')
setwd('Downloads')
getwd()
load('20-69_dödsorsak3st')
load("death.xlsẍ")
load("death.xl̈")
getwd()
load("death.xlsẍ")
mydata = read.table(file="death")
mydata = read.table(file="death",sep="/t",head=TRUE)
mydata = read.table(file="death.xlsx",sep="/t",head=TRUE)
install.packages("readxl")
library("readxl")
mydata = read_excel("death.xlsx")
mydata
install.packages("xlsx")
library("xlsx")
library("xlsx")
install.packages("xlsx")
library("xlsx")
mydata = read.xlsx("death.xlsx")
?readxl
mydata = readxl("death.xlsx")
mydata = read.xl("death.xlsx")
mydata = read.csv("death.xlsx")
mydata = read_xlsx("death.xlsx")
mydata = read_xlsx("death.xlsx", header = TRUE)
mydata = read_xlsx("death.xlsx")
mydata[1]
mydata[1,1]
mydata[1,1]
mydata[1,2]
mydata[1,3]
mydata[1,4]
mydata = read.xlsx("death.xlsx")
mydata = read.table("death.xlsx")
mydata
mydata = read.xlsx("death.xlsx")
mydata = read_xlsx("death.xlsx")
typeof(mydata)
?read.xlsx
install.packages("readxl")
install.packages("readxl")
t.test((1,2),(1,2))
t.test(x=(1,2) y=(1,2))
(1,2)
[1,2]
x=(1,2)
?vector
t.test(c(1,2) c(1,2))
c(1,2)
t.test(c(1,2), c(1,2))
t.test(c(1,2), c(1,2,10))
t.test(c(1,2), c(1,2,10000))
mydata
mydata$..3
mydata$..5
?read_xlsx
mydata
df <- data.frame(matrix(unlist(mydata), nrow=length(mydata), byrow=T))
df
df[1:10]
df <- data.frame(matrix(unlist(mydata), nrow=length(mydata), byrow=T),header=TRUE)
head(df)
df[1:10]
df$header
df$X1
length(df)
length(mydata)
df[1]
df[1,]
df[2]
df
summary(df)
test = as.data.frame(mydata)
test
test[1]
test[1:10]
head(test)
as.data.frame()
?as.data.frame()
mydata[1]
mydata[1,1]
header.true(test)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
header.true(test)
head(test)
test = as.data.frame(mydata)
test[1]
test[1,1]
test[1,2]
test[1,1:10]
test[1,1:11]
test[1,1:20]
test[1,1:15]
test[1,1:16]
test[1,1:17]
test[1,1:16]
?dataframe
?data.frame
row.names.data.frame(test)
?row.names.data.frame
colnames(test) = test[1,1:16]
head(test)
t.test(c(1,2,3,4,5,6,7,8,9,10),c(1,2,3,4,5,6,7,8,9,10))
cor(c(1,2,3),c(1,2,3))
cor(c(1,2,3),c(1,2,3,5))
cor(c(1,2,3,4),c(1,2,3,5))
cor(c(1,3,4,2),c(1,2,3,5))
t.test(c(1,2,3,4,5,6),c(1,2,3,4,5,6))
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6),c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6))
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6),c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,100))
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6),c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)<3)
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)>5,c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)<3)
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)>10,c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)<3)
t.test(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)>10,c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,9)<3)
t.test(1,2)
t.test(c(1,2),c(1,2))
t.test(c(1,2),c(1,2,2,2,2,2,2,2,2,2,2))
t.test(c(1,2),c(1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))
t.test(c(1,2),c(1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2))
t.test(c(1,2),c(1,2,2,2,2,2,2,2,2,2,2,200))
t.test(c(1,2),c(1,4))
t.test(c(1,2),c(1,8))
t.test(c(1,2),c(1,80))
# 2. Test whether your birthyear minus 2000 is zero.
b-2000==0
# 1. Create an object b that contains your birthyear.
b <- 1996
# 2. Test whether your birthyear minus 2000 is zero.
b-2000==0
# 1. Create an object b that contains your birthyear.
b<-1996
# 2. Test whether your birthyear minus 2000 is zero.
b-2000==0
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
library(rio)
library(haven)
install.packages(haven)
install.packages("haven")
library(rio)
install.packages("rio")
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
setwd("..")
setwd("DOcuments/Github")
setwd("data_analysis_R")
getwd()
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
setwd('C:/Users/jhohbein/Documents/Github/data_analysis_R')
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
list.files()
setwd('lesson1')
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
soep
typeof(soep)
median(soep$ybirth)
?frequency()
?cc
?table
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
table(soep$sex , soep$mar)
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
table(soep$sex , soep$mar, useNA = TRUE)
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
table(soep$sex , soep$mar, useNA = c("true"))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
table(soep$sex , soep$mar, useNA = c("always"))
?addmargins
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA = c("always")))
# 4. Compute the median birth year, based on the variable
#    "ybirth".
median(soep$ybirth, na.rm = TRUE)
# 4. Compute the median birth year, based on the variable
#    "ybirth".
median(soep$ybirth, na.rm = TRUE)
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA = c("always")))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA = "always")
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA = "always"))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA ='always'))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA ='always'))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA ='always'))
?prop.table
?table
?prop.table
?table
?table
eee
1+1
?table
?prop.table
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(prop.table(soep$sex , soep$mar, useNA ='always'))
# 3. Produce a two-way frequency table of marital status by
#    gender, based on the variables "sex" and "mar". Make
#    sure the tabulation includes NAs.
addmargins(table(soep$sex , soep$mar, useNA ='always'))
