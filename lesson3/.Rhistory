bin_probability = function(success,trials,prob){
if(check_trials(trials) != TRUE |   check_success(success,trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(bin_choose(trials,success)*(prob^success)*((1-prob)^(trials-success)))
}
#1.5
#' @title bin_distribution
#' @description Creates an object of class bindis
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bindis
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_distribution(5,0.5)
bin_distribution = function(trials,prob){
re = data.frame(1,1)
names(re) = c("success","probability")
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
}
class(re) = c("bindis","data.frame")
return(re)
}
#' @export
plot.bindis = function(x){
plot(x$probability,type="b")
}
#1.6
#' @title bin_cumulitive
#' @description Creates an object of class bincum
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bincum
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_cumulative(5,0.5)
bin_cumulitive = function(trials,prob){
re = data.frame(1,1,1)
names(re) = c("success","probability","cumulitive")
cumulitive = 0;
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
cumulitive = cumulitive +re[success+1,"probability"]
re[success+1,"cumulitive"] = cumulitive
}
class(re) = c("bincum","data.frame")
return(re)
}
#' @export
plot.bincum = function(x){
plot(x$probability,type="b")
}
#1.7
#' @title bin_variable
#' @description Creates an object of class binvar
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class binvar
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_variable(10,0.3)
bin_variable = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
re = list(trials,prob)
names(re) = c("trials","prob")
class(re) = "binvar"
return(re)
}
#' @export
print.binvar = function(x){
cat("Bionomial Variable \n Parameters \n  - number of trials: ",x$trials,"\n  - prob of success: ",x$prob)
}
#' @export
summary.binvar = function(x){
#return(cat("Summary Binomial \nParameters\n- number of trials: ",x$trials,"\n- prob of success: ",x$list,"\nMeasures\n- mean: ",aux_mean(x$trials,x$prob),"\n- variance: ",aux_variance(x$trials,x$prob),"\n- mode: ",aux_mode(x$trials,x$prob),"\n- skewness: ",aux_skewness(x$trials,x$prob),"\n- kurtosis: ",aux_kurtosis(x$trials,x$prob)))
freqs <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob))
obj <- list(freqs = freqs)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x) {
cat("Summary Binomial \nParameters\n- number of trials: ",x$freqs$trials,"\n- prob of success: ",x$freqs$prob,"\nMeasures\n- mean: ",aux_mean(x$freqs$trials,x$freqs$prob),"\n- variance: ",aux_variance(x$freqs$trials,x$freqs$prob),"\n- mode: ",aux_mode(x$freqs$trials,x$freqs$prob),"\n- skewness: ",aux_skewness(x$freqs$trials,x$freqs$prob),"\n- kurtosis: ",aux_kurtosis(x$freqs$trials,x$freqs$prob))
invisible(x)
}
#' @export
bin_mean = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mean(trials,prob))
}
#' @export
bin_variance = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_variance(trials,prob))
}
#' @export
bin_mode = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mode(trials,prob))
}
#' @export
bin_skewness = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_skewness(trials,prob))
}
#' @export
bin_kurtosis = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_kurtosis(trials,prob))
}
bin_mean(10,0.3)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("gastonstat/cointoss")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout1")
devtools::install_github("jamesonth")
devtools::install_github("jamesonth"/)
devtools::install_github("jamesonth"/workout2)
devtools::install_github("jamesonth"/workout1)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/binomial)
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout01-Jameson-Hohbein")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("https://github.com/jamesonth/binomial.git")
https://github.com/jamesonth/binomial.git
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
sqrt{(0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2
sqrt((0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2)
sqrt((0.1-0.92)^2 + (0.16-0.80)^2 + (0.15-0.70)^2 + (0.28-0.60)^2 + (0.31-0.61)^2)
sqrt((0.92-0.10)^2 + (0.8-0.16)^2 + (0.7-0.15)^2 + (0.6-0.28)^2 + (0.61-0.31)^2)
sqrt((0.1-0.10)^2 + (0.16-0.16)^2 + (0.15-0.15)^2 + (0.28-0.28)^2 + (0.31-0.31)^2)
sqrt((0.44-0.1)^2 + (0.25-0.16)^2 + (0.35-0.15)^2 + (0.59-0.28)^2 + (0.64-0.31)^2)
sqrt((0.92-0.91)^2 + (0.8-0.83)^2 + (0.7-0.81)^2 + (0.6-0.55)^2 + (0.61-0.46)^2)
sqrt((0.1-0.91)^2 + (0.16-0.83)^2 + (0.15-0.81)^2 + (0.28-0.55)^2 + (0.31-0.46)^2)
sqrt((0.44-0.91)^2 + (0.25-0.83)^2 + (0.35-0.81)^2 + (0.59-0.55)^2 + (0.64-0.46)^2)
strtoi(strsplit("01-09-2019","-")[[1]][1])
strtoi(strsplit("01-09-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[2]][1])
strtoi(strsplit("01-08-2019","-")[[1]][1])
strtoi(strsplit("01-08-2019","-")[[1]][3])
strtoi(strsplit("01-08-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[1]][1])
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][2]
?strtoi
strsplit("01-08-2019","-")[[1]][2]
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][3]
print("hhe")
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][2]
strsplit("01-08-2019","-")[[1]][3]
strsplit("01-09-2019","-")[[1]][3]
strsplit("01-09-2019","-")[[1]][2]
strsplit("01-09-2019","-")[[1]][1]
stroi("09")
strtoi("09")
strtoi("9")
strtoi("01")
strtoi("08")
strtoi("07")
strtoi("04")
replace("0","09")
?replace
?sub
grep(c("0"),"09")
grepl(c("0"),"09")
grep(c("0"),"09")
gsub("0","09")
gsub("0","", "09")
strtoi(gsub("0","", "09"))
strtoi(gsub("0","", "01"))
"09"[-1:]
"09"[:]
"09"[_1]
"09"[-1]
strtoi("07")
strtoi("08")
strtoi("09")
strtoi("10")
strtoi("11")
strtoi("12")
strtoi("13")
strtoi("14")
strtoi("20")
strtoi("01")
strtoi("02")
strtoi("03")
strtoi("04")
strtoi("05")
strtoi("06")
strtoi("07")
strtoi("08")
strtoi("09")
strtoi("10")
strtoi("11")
strtoi("30")
require(koRpus)
library(koRpus)
library(koRpus.lang.en)
bt.corpus = bt.corpus[which(bt.corpus$chair==FALSE),] # this line will change the bt.corpus list to only the ones where the chair is set to false
load('Corp_Bundestag.Rdata'); # this will load in your list at bt.corpus into your environment
setwd("../Downloads")
load('Corp_Bundestag.Rdata'); # this will load in your list at bt.corpus into your environment
?sample
sample(bt.corpus,1)
sample(bt.corpus,size = 1)
type(bt.corpus)
typeof(bt.corpus)
as.Date('2020-10-11')
as.Date('2020-10-11') > as.Date("2020-9-11")
as.Date('2020-10-11') > as.Date("2020-10-11")
as.Date('2020-10-11') > as.Date("2020-10-12")
as.Date('2020-10-11') > as.Date("2020-10-10")
?str
str("2020")
str(2020)
typeof(str(2020))
str(30202)
as.Date(2020)
as.Date(str(2020)+"-10-2")
as.Date(toString(2020)+"-10-2")
as.Date(paste(str(2020),"-10-2"))
as.Date(paste(2020,"-10-2"))
as.Date(paste("2020"2020,"-10-2"))
as.Date(paste("2020","-10-2"))
paste("heheh","hehe")
paste("heheh","hehe", sep="")
as.Date(paste("2020","-10-2",sep=""))
as.Date(paste(2020,"-10-2",sep=""))
as.Date(paste(2020,10,10,sep=""))
as.Date(paste(2020,"20102",sep=""))
as.Date(paste(2020,"-20102",sep=""))
as.Date(paste(2020,"-10-2",sep=""))
as.Date(paste(toString(2020),"-10-2",sep=""))
paste(toString(2020), "-",toString(10),"-",toString(2))
paste(toString(2020), "-",toString(10),"-",toString(2),sep="")
as.Date(  paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep="") )
as.Date( paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep="") )
as.Date(paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep="") )
as.Date(paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep=""))
paste(toString(2020), "-",toString(10),"-",toString(2),sep="")
typeof(paste(toString(2020), "-",toString(10),"-",toString(2),sep=""))
toString(paste(toString(2020), "-",toString(10),"-",toString(2),sep=""))
as.Date(toString(paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep="")))
as.Date("2020-20-10")
as.Date("2020-10-10")
as.Date(toString(paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep="")))
as.Date(paste(toString(bt.corpus$year), "-",toString(bt.corpus$month),"-",toString(bt.corpus$day),sep=""))
as.Date(paste(toString(2020), "-",toString(10),"-",toString(2),sep=""))
bt.corpus[1:2]
bt.corpus[1]
bt.corpus[1,1]
for(b in bt.corpus){
print(b)
break;
}
for(b in bt.corpus){
print(b)
break;
}
for(b in bt.corpus){
print(b)
break
}
for(b in bt.corpus){
print(b[1])
break
}
bt.corpus[[1]]
bt.corpus[1,]
length(bt.corpus)
for (i in 1:length(bt.corpus)) {
print(bt.corpus[i,])
break;
}
length(bt.corpus[1,])
length(bt.corpus[])
length(bt.corpus)
length(bt.corpus[,1])
length(bt.corpus[100,])
bt.corpus[100,]
bt.corpus[100,1]
bt.corpus[101,1]
bt.corpus[401,1]
bt.corpus[101,1]
true && true
1==1 && 1==1
[1,2,4]
typeof(1:10)
typeof([1,""])
bt.corpus[1,]$date
bt.corpus$incumbency = FALSE; # default is false
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
soep
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
library(haven)
install.packages("tibbl")
install.packages("tibble")
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
setwd("../Documents/Github/data_analysis_R")
setwd("lesson3")
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
soep[1]
soep[1,1]
soep[1,1:10]
soep[1,]
soep$ybirth
soep$ymove
Math.max(1,2)
max(1,2)
max(c(1,2),c(-1,4))
NA -1
which(1)
which(1==1)
which(1==2)
which(True==True)
which(TRUE)
which(FALSE)
which(3==3)
which(c(0,2)==c(0,2))
which(c(0,2)==c(0,1))
which(c(0,2)-c(0,1))
soep$age_moved = 0 # initialize the new column at 0
soep$aged_moved = soep$ymove - soep$ybirth
soep$age_moved = 0 # initialize the new column at 0
soep$aged_moved = soep$ymove - soep$ybirth # If either ymove or ybirth are NA, that index of aged_moved will also be NA
soep$age_moved = 0 # initialize the new column at 0
soep$age_moved = soep$ymove - soep$ybirth # If either ymove or ybirth are NA, that index of aged_moved will also be NA
which(soep$age_moved<0)
soep[which(soep$age_moved<0),]$age_moved = 0
which(soep$age_moved<0)
which(soep$age_moved == NA)
which(soep$ymove == NA)
which(soep$ybirth == NA)
summary(soep$age_moved)
which(soep$ybirth == "NA")
which(soep$ymove == "NA")
which(soep$age_moved == "NA")
which(soep$age_moved == NA)
soep$age_moved
soep$age_moved == NA
soep$age_moved = 0 # initialize the new column at 0
soep$age_moved = soep$ymove - soep$ybirth # Subtracts their move date to their birth year which will return age of when they moved
# If either ymove or ybirth are NA, that index of aged_moved will also be NA
soep[which(soep$age_moved<0),]$age_moved = 0 # converts values below 0 to 0. Fulfills last requirement if born after move in date, value should be zero
# 1b) Verify that you created age_moved correctly (incl.
#     missing values).
summary(soep$age_moved)
which(soep$age_moved == NA)
which(soep$age_moved == 63)
which(soep$age_moved == "NA")
which(soep$age_moved == NA)
which(soep$age_moved == NA)
which(is.na(soep$age_moved))
summary(soep$age_moved)
soep[1:100, c("ymove","ybirth","age_moved")]
summary(soep$age_moved)
summary(soep$age_moved) # Summary shows we have 92 NAs and the medium
soep$polint
factor(soep$polint)
# factor identifying married vs. unmarried men vs. women (4 levels)
summary(soep$sex)
soep$mar_by_gen <- NA
soep$mar_by_gen[
soep$married == "Married" & soep$sex == "Male"
] <- "Married male"
soep$mar_by_gen[
soep$married == "Married" & soep$sex == "Female"
] <- "Married female"
soep$mar_by_gen[
soep$married == "Not married" & soep$sex == "Male"
] <- "Not married male"
soep$mar_by_gen[
soep$married == "Not married" & soep$sex == "Female"
] <- "Not married female"
soep$mar_by_gen <- factor(soep$mar_by_gen)
soep[1:100, c("married", "sex", "mar_by_gen")]   # check
which(soep$polint == "Very much" || soep$polint == "much")
which(soep$polint == "Very much")
which(soep$polint == "Very much" | soep$polint == "much")
size(which(soep$polint == "Very much" | soep$polint == "much"))
length(which(soep$polint == "Very much" | soep$polint == "much"))
length(which(soep$polint == "Very much" || soep$polint == "much"))
length(which(soep$polint == "Very much"))
length(which(soep$polint == "Very much" || soep$polint == "much"))
length(which(soep$polint == "much"))
summary(soep$polint)
length(soep$polint == "Very much" || soep$polint == "Much"))
length(which(soep$polint == "Very much" || soep$polint == "Much"))
length(which(soep$polint == "Very much" | soep$polint == "Much"))
soep[which(soep$polint == "Very much" | soep$polint == "Much"),]$hi_polint = "Yes"
?factor
soep$hi_polint = NA # initialize the new variable with NA to retain missing values
soep[which(soep$polint == "Very much" | soep$polint == "Much"),]$hi_polint = "Yes"
soep[which(soep$polint == "Not much" | soep$polint == "Not at all"),]$hi_polint = "No"
# 2b) Verify that you created hi_polint correctly (incl.
#     missing values).
soep[1:100, c("polint","hi_polint")] # Allows for the specific check of the first 100 instances
summary(soep$hi_polint) # Summary shows we have 92 NAs and the median of 32 and mean of 33.24
factor(soep$hi_polint)
factor(c("Yes","No",NA))
soep$hi_polint = factor(soep$hi_polint)
# 2b) Verify that you created hi_polint correctly (incl.
#     missing values).
soep[1:100, c("polint","hi_polint")] # Allows for the specific check of the first 100 instances
summary(soep$hi_polint) # Summary shows we have 92 NAs and the median of 32 and mean of 33.24
summary(soep$state)
which(soep$state == "Mecklenburg-V.")
summary(soep$state)
soep$region = "West"
soep[which(soep$state == "Brandenburg" | soep$state == "Mecklenburg-V." | soep$state == "Saxony"| soep$state == "Saxony-Anhalt" | soep$state == "Thueringen" | soep$state == "Berlin"),]$region = "East"
summary(soep$region)
# soep[which(soep$state == "Baden-Wuerttemb." | soep$state == "Bavaria" | soep$state == "Hessen" | soep$state == "Lower Saxony" | soep$state == "Schleswig-Hols." |    )]
soep$region = factor(soep$region)
summary(soep$region)
summary(soep$region)
summary(soep$state)
soep$region = "West" # A summary of soep$state shows there are no NA values. This means it is not necessary to initialize the new variable with NA
# Instead of checking conditions for the two lists of states, I check the conditions for east and everything else is automatically set to West by default
soep[which(soep$state == "Brandenburg" | soep$state == "Mecklenburg-V." | soep$state == "Saxony"| soep$state == "Saxony-Anhalt" | soep$state == "Thueringen" | soep$state == "Berlin"),]$region = "East"
#Create the factor
soep$region = factor(soep$region)
summary(soep$state)
which(is.na(soep$state))
# 3b) Verify that you created region correctly (incl. missing
#     missing values).
soep[1:100, c("state","region")]
summary(soep$region)
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
which(is.na(soep$state))
soep <- soep[order(soep$dvisits), ]
View(soep)
?order
soep <- soep[order(soep$dvisits, decreasing = TRUE), ]
View(soep)
?colnames
# 2. Rename variable pib into party_id
colnames(soep$pib,"party_id")
# 2. Rename variable pib into party_id
colnames(soep$pib) = "party_id"
names(soep)
names(soep$pib)
names(soep$party_id)
library(rio)
library(haven)
soep <- data.frame(as_factor(read_dta("data/soep-extract-09.dta")))
soep <- spread_attrs(droplevels(gather_attrs(soep)))
names(soep$pib)
colnames(soep)
colnames(soep)["pib"]
colnames(soep)[1]
names(soep)[names(soep)=="pib"]
# 2. Rename variable pib into party_id
names(soep)[names(soep)=="pib"] = "party_id"
soep$party_id
soep[,1]
soep[,"party_id"]
# 3. Create a data frame soep_sat containing only the
#    variables dsat, lsat, and hsat.
soep_sat = soep[,c("dsat","lsat","hsat")]
soep_sat
