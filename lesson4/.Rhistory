#1.7
#' @export
bin_variable = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
re = list(trials,prob)
names(re) = c("trials","prob")
class(re) = "binvar"
return(re)
}
#' @export
print.binvar = function(x){
cat("Bionomial Variable \n Parameters \n  - number of trials: ",x$trials,"\n  - prob of success: ",x$prob)
}
#' @export
summary.binvar = function(x){
#return(cat("Summary Binomial \nParameters\n- number of trials: ",x$trials,"\n- prob of success: ",x$list,"\nMeasures\n- mean: ",aux_mean(x$trials,x$prob),"\n- variance: ",aux_variance(x$trials,x$prob),"\n- mode: ",aux_mode(x$trials,x$prob),"\n- skewness: ",aux_skewness(x$trials,x$prob),"\n- kurtosis: ",aux_kurtosis(x$trials,x$prob)))
freqs <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob))
obj <- list(freqs = freqs)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x) {
cat("Summary Binomial \nParameters\n- number of trials: ",x$freqs$trials,"\n- prob of success: ",x$freqs$prob,"\nMeasures\n- mean: ",aux_mean(x$freqs$trials,x$freqs$prob),"\n- variance: ",aux_variance(x$freqs$trials,x$freqs$prob),"\n- mode: ",aux_mode(x$freqs$trials,x$freqs$prob),"\n- skewness: ",aux_skewness(x$freqs$trials,x$freqs$prob),"\n- kurtosis: ",aux_kurtosis(x$freqs$trials,x$freqs$prob))
invisible(x)
}
#' @export
bin_mean = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mean(trials,prob))
}
#' @export
bin_variance = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_variance(trials,prob))
}
#' @export
bin_mode = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mode(trials,prob))
}
#' @export
bin_skewness = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_skewness(trials,prob))
}
#' @export
bin_kurtosis = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_kurtosis(trials,prob))
}
dis1 = bin_distribution(5,0.5)
plot(dis1)
type(bin1)
typeof(bin1)
bin1
dis1
typeof(dis1)
class(dis1)
#' @export
bin_distribution = function(trials,prob){
re = data.frame(1,1)
names(re) = c("success","probability")
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
}
class(re) = c("bindis","data.frame")
return(re)
}
#' @export
plot.bindis = function(x){
plot(x$probability,type="b")
}
dis1 = bin_distribution(5,0.5)
plot(dis1)
#1.6
#' @export
bin_cumulitive = function(trials,prob){
re = data.frame(1,1,1)
names(re) = c("success","probability","cumulitive")
cumulitive = 0;
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
cumulitive = cumulitive +re[success+1,"probability"]
re[success+1,"cumulitive"] = cumulitive
}
class(re) = c("bincum","data.frame")
return(re)
}
#' @export
plot.bincum = function(x){
plot(x$probability,type="b")
}
library(devtools)
package(devtools)
install.packages(devtools)
library(devtools)
library(binomial)
install.packages("binomial")
library(binomial)
library("binomial")
install.packages("binomial")
library(binomial)
library("binomial")
library(binomial)
library(binomial)
library(binomial)
library(binomial)
install.packages("devtools")
#1.3
#' @title bin_choose
#' @description Creates an integer or a vector of integers
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an integer or a vector of integers
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_choose(5,2)
#'
#' # Another standard example
#' bin1 <- bin_choose(5,1:3)
bin_choose = function(n,k){
if(k>n){
stop("Invalid")
}
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
#1.4
#' @title bin_probability
#' @description Creates an integer or a vector of integers
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an integer or a vector of integers
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_probability(2,5,0.5)
#'
#' # Another standard example
#' bin1 <- bin_probability(0:2,5,0.5)
bin_probability = function(success,trials,prob){
if(check_trials(trials) != TRUE |   check_success(success,trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(bin_choose(trials,success)*(prob^success)*((1-prob)^(trials-success)))
}
#1.5
#' @title bin_distribution
#' @description Creates an object of class bindis
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bindis
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_distribution(5,0.5)
bin_distribution = function(trials,prob){
re = data.frame(1,1)
names(re) = c("success","probability")
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
}
class(re) = c("bindis","data.frame")
return(re)
}
#' @export
plot.bindis = function(x){
plot(x$probability,type="b")
}
#1.6
#' @title bin_cumulitive
#' @description Creates an object of class bincum
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class bincum
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_cumulative(5,0.5)
bin_cumulitive = function(trials,prob){
re = data.frame(1,1,1)
names(re) = c("success","probability","cumulitive")
cumulitive = 0;
for(success in 0:trials){
re[success+1,"success"] = success
re[success+1,"probability"]=bin_probability(success,trials,prob)
cumulitive = cumulitive +re[success+1,"probability"]
re[success+1,"cumulitive"] = cumulitive
}
class(re) = c("bincum","data.frame")
return(re)
}
#' @export
plot.bincum = function(x){
plot(x$probability,type="b")
}
#1.7
#' @title bin_variable
#' @description Creates an object of class binvar
#' @param trials number of trials
#' @param prob probability between 0-1
#' @return an object of class binvar
#' @export
#' @examples
#' # standard example
#' bin1 <- bin_variable(10,0.3)
bin_variable = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
re = list(trials,prob)
names(re) = c("trials","prob")
class(re) = "binvar"
return(re)
}
#' @export
print.binvar = function(x){
cat("Bionomial Variable \n Parameters \n  - number of trials: ",x$trials,"\n  - prob of success: ",x$prob)
}
#' @export
summary.binvar = function(x){
#return(cat("Summary Binomial \nParameters\n- number of trials: ",x$trials,"\n- prob of success: ",x$list,"\nMeasures\n- mean: ",aux_mean(x$trials,x$prob),"\n- variance: ",aux_variance(x$trials,x$prob),"\n- mode: ",aux_mode(x$trials,x$prob),"\n- skewness: ",aux_skewness(x$trials,x$prob),"\n- kurtosis: ",aux_kurtosis(x$trials,x$prob)))
freqs <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob))
obj <- list(freqs = freqs)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x) {
cat("Summary Binomial \nParameters\n- number of trials: ",x$freqs$trials,"\n- prob of success: ",x$freqs$prob,"\nMeasures\n- mean: ",aux_mean(x$freqs$trials,x$freqs$prob),"\n- variance: ",aux_variance(x$freqs$trials,x$freqs$prob),"\n- mode: ",aux_mode(x$freqs$trials,x$freqs$prob),"\n- skewness: ",aux_skewness(x$freqs$trials,x$freqs$prob),"\n- kurtosis: ",aux_kurtosis(x$freqs$trials,x$freqs$prob))
invisible(x)
}
#' @export
bin_mean = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mean(trials,prob))
}
#' @export
bin_variance = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_variance(trials,prob))
}
#' @export
bin_mode = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_mode(trials,prob))
}
#' @export
bin_skewness = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_skewness(trials,prob))
}
#' @export
bin_kurtosis = function(trials,prob){
if(check_trials(trials) != TRUE | check_prob(prob)!=TRUE){
stop("Something is invalid")
}
return(aux_kurtosis(trials,prob))
}
bin_mean(10,0.3)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("jamesonth/binomial",build_vignettes = TRUE)
devtools::install_github("gastonstat/cointoss")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout1")
devtools::install_github("jamesonth")
devtools::install_github("jamesonth"/)
devtools::install_github("jamesonth"/workout2)
devtools::install_github("jamesonth"/workout1)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/workout1-Jameson-Hohbein)
devtools::install_github("jamesonth"/binomial)
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/workout01-Jameson-Hohbein")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
devtools::install_github("https://github.com/jamesonth/binomial.git")
https://github.com/jamesonth/binomial.git
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial.git")
devtools::install_github("jamesonth/binomial")
devtools::install_github("jamesonth/binomial")
sqrt{(0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2
sqrt((0.44-0.92)^2 + (0.25-0.80)^2 + (0.35-0.70)^2 + (0.59-0.60)^2 + (0.64-0.61)^2)
sqrt((0.1-0.92)^2 + (0.16-0.80)^2 + (0.15-0.70)^2 + (0.28-0.60)^2 + (0.31-0.61)^2)
sqrt((0.92-0.10)^2 + (0.8-0.16)^2 + (0.7-0.15)^2 + (0.6-0.28)^2 + (0.61-0.31)^2)
sqrt((0.1-0.10)^2 + (0.16-0.16)^2 + (0.15-0.15)^2 + (0.28-0.28)^2 + (0.31-0.31)^2)
sqrt((0.44-0.1)^2 + (0.25-0.16)^2 + (0.35-0.15)^2 + (0.59-0.28)^2 + (0.64-0.31)^2)
sqrt((0.92-0.91)^2 + (0.8-0.83)^2 + (0.7-0.81)^2 + (0.6-0.55)^2 + (0.61-0.46)^2)
sqrt((0.1-0.91)^2 + (0.16-0.83)^2 + (0.15-0.81)^2 + (0.28-0.55)^2 + (0.31-0.46)^2)
sqrt((0.44-0.91)^2 + (0.25-0.83)^2 + (0.35-0.81)^2 + (0.59-0.55)^2 + (0.64-0.46)^2)
strtoi(strsplit("01-09-2019","-")[[1]][1])
strtoi(strsplit("01-09-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[2]][1])
strtoi(strsplit("01-08-2019","-")[[1]][1])
strtoi(strsplit("01-08-2019","-")[[1]][3])
strtoi(strsplit("01-08-2019","-")[[1]][2])
strtoi(strsplit("01-08-2019","-")[[1]][1])
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][2]
?strtoi
strsplit("01-08-2019","-")[[1]][2]
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][3]
print("hhe")
strsplit("01-08-2019","-")[[1]][1]
strsplit("01-08-2019","-")[[1]][2]
strsplit("01-08-2019","-")[[1]][3]
strsplit("01-09-2019","-")[[1]][3]
strsplit("01-09-2019","-")[[1]][2]
strsplit("01-09-2019","-")[[1]][1]
stroi("09")
strtoi("09")
strtoi("9")
strtoi("01")
strtoi("08")
strtoi("07")
strtoi("04")
replace("0","09")
?replace
?sub
grep(c("0"),"09")
grepl(c("0"),"09")
grep(c("0"),"09")
gsub("0","09")
gsub("0","", "09")
strtoi(gsub("0","", "09"))
strtoi(gsub("0","", "01"))
"09"[-1:]
"09"[:]
"09"[_1]
"09"[-1]
strtoi("07")
strtoi("08")
strtoi("09")
strtoi("10")
strtoi("11")
strtoi("12")
strtoi("13")
strtoi("14")
strtoi("20")
strtoi("01")
strtoi("02")
strtoi("03")
strtoi("04")
strtoi("05")
strtoi("06")
strtoi("07")
strtoi("08")
strtoi("09")
strtoi("10")
strtoi("11")
strtoi("30")
require(koRpus)
library(koRpus)
library(koRpus.lang.en)
bt.corpus = bt.corpus[which(bt.corpus$chair==FALSE),] # this line will change the bt.corpus list to only the ones where the chair is set to false
load('Corp_Bundestag.Rdata'); # this will load in your list at bt.corpus into your environment
?stargazer
### Exercise 4.2
# Each problem is worth 1 point. No partial credit, answers
# must be complete and entirely correct. Write your solution
# below each problem. We only need your R code, not your
# results!
# 1. Load the data set ex4dt that you created in exercise 4.1.
load("data/ex4-data.RData")
# 2. Compute the Pearson correlation coefficient between ideology
#    and income_1k.
cor(ex4dt$ideology, ex4dt$income_1k, use = "complete.obs")
# 3. Run a linear regression of ideology (dependent variable) on
#    income_1k (independent variable) and save your result in the
#    object model1. Then summarize model1.
model1 = lm(ex4dt$ideology ~ ex4dt$income_1k)
summary(model1)
# 4. Draw a scatterplot of ideology (y-axis) on income_1k (x-axis)
#    and superimpose the regression line from model1.
plot(ideology ~ income_1k, data = ex4dt)
abline(model1)
# How to submit:
# Save this file using the last six digits of your matriculation
# number and your family name as follows:
#                sixdigits-familyname.R
# 4. Draw a scatterplot of ideology (y-axis) on income_1k (x-axis)
#    and superimpose the regression line from model1.
plot(ideology ~ income_1k, data = ex4dt)
# 1. Load the data set ex4dt that you created in exercise 4.1.
load("data/ex4-data.RData")
getwd()
setwd("../github/data_analysis_R/lesson4")
setwd("/github/data_analysis_R/lesson4")
setwd("Github/data_analysis_R/lesson4")
### Exercise 4.1
# Each sub-problem is worth 1 point. No partial credit, answers
# must be complete and entirely correct. Write your solution
# below each problem. We only need your R code, not your
# results!
# Does political ideology correlate with personal income?
# Run the following lines to load the ALLBUS data set:
library(haven)
library(rio)
ggss <- data.frame(as_factor(read_dta("data/allbus-extract-07.dta")))
ggss <- spread_attrs(droplevels(gather_attrs(ggss)))
# 1a) Generate a numeric variable ideology from variable v106.
#     ideology should range from 1 to 10 with higher values
#     indicating ideological self-placements further to the right.
#     Make sure to code missing values on ideology as NA.
ggss$ideology <- ggss$v106
ggss$ideology[ggss$v106 == "KEINE ANGABE"] <- NA
ggss$ideology <- as.numeric(ggss$ideology)
# 1b) Verify that you coded ideology correctly.
summary(ggss$ideology)
ggss[1:100, c("v106", "ideology")]
# 2a) Re-create the variable income from lesson 4 (i.e., use the code
#     lesson 4.1 to create the variable income). Now rescale income
#     to thousand euros. Store the result in a new variable that you
#     call income_1k. Make sure that missing values on income are
#     retained.
ggss$income <- ggss$v388
ggss$income[
ggss$v388 %in% c("KEIN EINKOMMEN", "VERWEIGERT", "KEINE ANGABE")
] <- NA
ggss$income <- as.numeric(as.character(ggss$income))
ggss$income_1k = ggss$income / 1000 # scale it by 1000
# 2b) Verify that you created income_1k correctly.
summary(ggss$income_1k)
ggss[1:100, c("v388", "income_1k")]
# 3a) Generate a factor incgroup from income. incgroup should
#     distinguish three groups of people: those with incomes up to
#     1000 euros, those with incomes above 1000 to 2000 euros and
#     those with incomes above 2000 euros. Label the three groups
#     "low", "mid", and "high". Make sure that missing values on
#     income are retained.
income_intervals <- c(0,1000,2000,max(ggss$income, na.rm = TRUE))
ggss$incgroup <- cut(
ggss$income,
breaks = income_intervals,
include.lowest = TRUE,
labels = c("low", "mid", "high")
)
rm(income_intervals)
# 3b) Verify that you coded incgroup correctly.
ggss[100:300, c("income", "incgroup")]
summary(ggss$incgroup)
# 4a) Create a factor region, which is variable v3 translated to
#     English. Label the outcome categories "east" (for NEUE
#     BUNDESLAENDER) and "west" (for ALTE BUNDESLAENDER).
ggss$region <- NA
ggss$region[ggss$v3 == "ALTE BUNDESLAENDER" ] <- "west"
ggss$region[ggss$v3 == "NEUE BUNDESLAENDER"] <- "east"
ggss$region <- factor(ggss$region)
# 4b) Verify that you coded region correctly.
ggss[1:100, c("v3", "region")]
summary(ggss$region)
# 5a) Create a data set ex4dt that contains only variables ideology
#     income_1k, incgroup, and region.
ex4dt <- ggss[, c("income_1k", "ideology", "incgroup", "region")]
# 5b) Save ex4dt in an external file in your data folder. Name the
#     file ex4-data.RData.
save(ex4dt, file = "data/ex4-data.RData")
# How to submit:
# Save this file using the last six digits of your matriculation
# number and your family name as follows:
#                sixdigits-familyname.R
ggss$ideology <- ggss$v106
ggss$ideology[ggss$v106 == "KEINE ANGABE"] <- NA
ggss$ideology <- as.numeric(ggss$ideology)
summary(ggss$ideology)
ggss[1:100, c("v106", "ideology")]
